package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 12 14:56:01 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsAssetAttributeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        AttributeId,
        CategoryId,
        BuId,
        AssetAttribute,
        RequiredFlag,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        ObjectVersionNumber,
        LookupType,
        DataType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ATTRIBUTEID = AttributesEnum.AttributeId.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int BUID = AttributesEnum.BuId.index();
    public static final int ASSETATTRIBUTE = AttributesEnum.AssetAttribute.index();
    public static final int REQUIREDFLAG = AttributesEnum.RequiredFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();
    public static final int LOOKUPTYPE = AttributesEnum.LookupType.index();
    public static final int DATATYPE = AttributesEnum.DataType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxadsAssetAttributeEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsAssetAttributeEO");
    }


    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XXADS_ASSET_ATTR_S",getDBTransaction());
        setAttributeId(seq.getSequenceNumber());
    //        setAttachmentCode("PROBATION CONFIRMATION");
    }
    
    private static final byte USERNAME_HISTORY_TYPE =13;
    
    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
    if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
       // Custom History type logic goes here
      return (String) ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
    }
    return super.getHistoryContextForAttribute(attr);
    }

    /**
     * Gets the attribute value for AttributeId, using the alias name AttributeId.
     * @return the value of AttributeId
     */
    public Number getAttributeId() {
        return (Number) getAttributeInternal(ATTRIBUTEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttributeId.
     * @param value value to set the AttributeId
     */
    public void setAttributeId(Number value) {
        setAttributeInternal(ATTRIBUTEID, value);
    }

    /**
     * Gets the attribute value for CategoryId, using the alias name CategoryId.
     * @return the value of CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoryId.
     * @param value value to set the CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for BuId, using the alias name BuId.
     * @return the value of BuId
     */
    public Number getBuId() {
        return (Number) getAttributeInternal(BUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuId.
     * @param value value to set the BuId
     */
    public void setBuId(Number value) {
        setAttributeInternal(BUID, value);
    }

    /**
     * Gets the attribute value for AssetAttribute, using the alias name AssetAttribute.
     * @return the value of AssetAttribute
     */
    public String getAssetAttribute() {
        return (String) getAttributeInternal(ASSETATTRIBUTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssetAttribute.
     * @param value value to set the AssetAttribute
     */
    public void setAssetAttribute(String value) {
        setAttributeInternal(ASSETATTRIBUTE, value);
    }

    /**
     * Gets the attribute value for RequiredFlag, using the alias name RequiredFlag.
     * @return the value of RequiredFlag
     */
    public String getRequiredFlag() {
        return (String) getAttributeInternal(REQUIREDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for RequiredFlag.
     * @param value value to set the RequiredFlag
     */
    public void setRequiredFlag(String value) {
        setAttributeInternal(REQUIREDFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }


    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }

    /**
     * Gets the attribute value for LookupType, using the alias name LookupType.
     * @return the value of LookupType
     */
    public String getLookupType() {
        return (String) getAttributeInternal(LOOKUPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LookupType.
     * @param value value to set the LookupType
     */
    public void setLookupType(String value) {
        setAttributeInternal(LOOKUPTYPE, value);
    }

    /**
     * Gets the attribute value for DataType, using the alias name DataType.
     * @return the value of DataType
     */
    public String getDataType() {
        return (String) getAttributeInternal(DATATYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DataType.
     * @param value value to set the DataType
     */
    public void setDataType(String value) {
        setAttributeInternal(DATATYPE, value);
    }

    /**
     * @param attributeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number attributeId) {
        return new Key(new Object[] { attributeId });
    }


}

