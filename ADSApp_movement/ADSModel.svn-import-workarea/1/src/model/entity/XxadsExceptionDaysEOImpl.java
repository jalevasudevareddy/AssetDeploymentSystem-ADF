package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 11 16:34:26 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsExceptionDaysEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        ExceptionId,
        BuId,
        ExceptionType,
        HolidayName,
        ExceptionDate,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        ObjectVersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EXCEPTIONID = AttributesEnum.ExceptionId.index();
    public static final int BUID = AttributesEnum.BuId.index();
    public static final int EXCEPTIONTYPE = AttributesEnum.ExceptionType.index();
    public static final int HOLIDAYNAME = AttributesEnum.HolidayName.index();
    public static final int EXCEPTIONDATE = AttributesEnum.ExceptionDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxadsExceptionDaysEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsExceptionDaysEO");
    }


    /**
     * Gets the attribute value for ExceptionId, using the alias name ExceptionId.
     * @return the value of ExceptionId
     */
    public oracle.jbo.domain.Number getExceptionId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(EXCEPTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExceptionId.
     * @param value value to set the ExceptionId
     */
    public void setExceptionId(oracle.jbo.domain.Number value) {
        setAttributeInternal(EXCEPTIONID, value);
    }

    /**
     * Gets the attribute value for BuId, using the alias name BuId.
     * @return the value of BuId
     */
    public Number getBuId() {
        return (Number) getAttributeInternal(BUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuId.
     * @param value value to set the BuId
     */
    public void setBuId(Number value) {
        setAttributeInternal(BUID, value);
    }

    /**
     * Gets the attribute value for ExceptionType, using the alias name ExceptionType.
     * @return the value of ExceptionType
     */
    public String getExceptionType() {
        return (String) getAttributeInternal(EXCEPTIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExceptionType.
     * @param value value to set the ExceptionType
     */
    public void setExceptionType(String value) {
        setAttributeInternal(EXCEPTIONTYPE, value);
    }

    /**
     * Gets the attribute value for HolidayName, using the alias name HolidayName.
     * @return the value of HolidayName
     */
    public String getHolidayName() {
        return (String) getAttributeInternal(HOLIDAYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for HolidayName.
     * @param value value to set the HolidayName
     */
    public void setHolidayName(String value) {
        setAttributeInternal(HOLIDAYNAME, value);
    }

    /**
     * Gets the attribute value for ExceptionDate, using the alias name ExceptionDate.
     * @return the value of ExceptionDate
     */
    public Date getExceptionDate() {
        return (Date) getAttributeInternal(EXCEPTIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExceptionDate.
     * @param value value to set the ExceptionDate
     */
    public void setExceptionDate(Date value) {
        setAttributeInternal(EXCEPTIONDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ObjectVersionNumber.
     * @param value value to set the ObjectVersionNumber
     */
    public void setObjectVersionNumber(Number value) {
        setAttributeInternal(OBJECTVERSIONNUMBER, value);
    }


    /**
     * @param exceptionId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number exceptionId) {
        return new Key(new Object[] { exceptionId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XXADS_EXCEPTION_DAYS_S",getDBTransaction());
        setExceptionId(seq.getSequenceNumber());
    //        setAttachmentCode("PROBATION CONFIRMATION");
    }
    
    private static final byte USERNAME_HISTORY_TYPE =13;
    
    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
    if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
    // Custom History type logic goes here
    return (String) ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
    }
    return super.getHistoryContextForAttribute(attr);
    }
}

