package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 22 11:11:55 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxAttachmentsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        AttachmentId,
        ReferenceId,
        AttachmentCode,
        FileName,
        FileType,
        AttachmentFile,
        CreatedBy,
        CreationDate,
        Title,
        ProcessFlag,
        ErrorMessage,
        Url,
        AttachmentType,
        ApproveFlag,
        WorkListId,
        RfiId,
        Category;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ATTACHMENTID = AttributesEnum.AttachmentId.index();
    public static final int REFERENCEID = AttributesEnum.ReferenceId.index();
    public static final int ATTACHMENTCODE = AttributesEnum.AttachmentCode.index();
    public static final int FILENAME = AttributesEnum.FileName.index();
    public static final int FILETYPE = AttributesEnum.FileType.index();
    public static final int ATTACHMENTFILE = AttributesEnum.AttachmentFile.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int PROCESSFLAG = AttributesEnum.ProcessFlag.index();
    public static final int ERRORMESSAGE = AttributesEnum.ErrorMessage.index();
    public static final int URL = AttributesEnum.Url.index();
    public static final int ATTACHMENTTYPE = AttributesEnum.AttachmentType.index();
    public static final int APPROVEFLAG = AttributesEnum.ApproveFlag.index();
    public static final int WORKLISTID = AttributesEnum.WorkListId.index();
    public static final int RFIID = AttributesEnum.RfiId.index();
    public static final int CATEGORY = AttributesEnum.Category.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxAttachmentsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxAttachmentsEO");
    }


    /**
     * Gets the attribute value for AttachmentId, using the alias name AttachmentId.
     * @return the value of AttachmentId
     */
    public oracle.jbo.domain.Number getAttachmentId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(ATTACHMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachmentId.
     * @param value value to set the AttachmentId
     */
    public void setAttachmentId(oracle.jbo.domain.Number value) {
        setAttributeInternal(ATTACHMENTID, value);
    }

    /**
     * Gets the attribute value for ReferenceId, using the alias name ReferenceId.
     * @return the value of ReferenceId
     */
    public Number getReferenceId() {
        return (Number) getAttributeInternal(REFERENCEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceId.
     * @param value value to set the ReferenceId
     */
    public void setReferenceId(Number value) {
        setAttributeInternal(REFERENCEID, value);
    }

    /**
     * Gets the attribute value for AttachmentCode, using the alias name AttachmentCode.
     * @return the value of AttachmentCode
     */
    public String getAttachmentCode() {
        return (String) getAttributeInternal(ATTACHMENTCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachmentCode.
     * @param value value to set the AttachmentCode
     */
    public void setAttachmentCode(String value) {
        setAttributeInternal(ATTACHMENTCODE, value);
    }

    /**
     * Gets the attribute value for FileName, using the alias name FileName.
     * @return the value of FileName
     */
    public String getFileName() {
        return (String) getAttributeInternal(FILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileName.
     * @param value value to set the FileName
     */
    public void setFileName(String value) {
        setAttributeInternal(FILENAME, value);
    }

    /**
     * Gets the attribute value for FileType, using the alias name FileType.
     * @return the value of FileType
     */
    public String getFileType() {
        return (String) getAttributeInternal(FILETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileType.
     * @param value value to set the FileType
     */
    public void setFileType(String value) {
        setAttributeInternal(FILETYPE, value);
    }

    /**
     * Gets the attribute value for AttachmentFile, using the alias name AttachmentFile.
     * @return the value of AttachmentFile
     */
    public BlobDomain getAttachmentFile() {
        return (BlobDomain) getAttributeInternal(ATTACHMENTFILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachmentFile.
     * @param value value to set the AttachmentFile
     */
    public void setAttachmentFile(BlobDomain value) {
        setAttributeInternal(ATTACHMENTFILE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the value of Title
     */
    public String getTitle() {
        return (String) getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for ProcessFlag, using the alias name ProcessFlag.
     * @return the value of ProcessFlag
     */
    public String getProcessFlag() {
        return (String) getAttributeInternal(PROCESSFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProcessFlag.
     * @param value value to set the ProcessFlag
     */
    public void setProcessFlag(String value) {
        setAttributeInternal(PROCESSFLAG, value);
    }

    /**
     * Gets the attribute value for ErrorMessage, using the alias name ErrorMessage.
     * @return the value of ErrorMessage
     */
    public String getErrorMessage() {
        return (String) getAttributeInternal(ERRORMESSAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ErrorMessage.
     * @param value value to set the ErrorMessage
     */
    public void setErrorMessage(String value) {
        setAttributeInternal(ERRORMESSAGE, value);
    }

    /**
     * Gets the attribute value for Url, using the alias name Url.
     * @return the value of Url
     */
    public String getUrl() {
        return (String) getAttributeInternal(URL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Url.
     * @param value value to set the Url
     */
    public void setUrl(String value) {
        setAttributeInternal(URL, value);
    }

    /**
     * Gets the attribute value for AttachmentType, using the alias name AttachmentType.
     * @return the value of AttachmentType
     */
    public String getAttachmentType() {
        return (String) getAttributeInternal(ATTACHMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachmentType.
     * @param value value to set the AttachmentType
     */
    public void setAttachmentType(String value) {
        setAttributeInternal(ATTACHMENTTYPE, value);
    }

    /**
     * Gets the attribute value for ApproveFlag, using the alias name ApproveFlag.
     * @return the value of ApproveFlag
     */
    public String getApproveFlag() {
        return (String) getAttributeInternal(APPROVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApproveFlag.
     * @param value value to set the ApproveFlag
     */
    public void setApproveFlag(String value) {
        setAttributeInternal(APPROVEFLAG, value);
    }

    /**
     * Gets the attribute value for WorkListId, using the alias name WorkListId.
     * @return the value of WorkListId
     */
    public Number getWorkListId() {
        return (Number) getAttributeInternal(WORKLISTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WorkListId.
     * @param value value to set the WorkListId
     */
    public void setWorkListId(Number value) {
        setAttributeInternal(WORKLISTID, value);
    }

    /**
     * Gets the attribute value for RfiId, using the alias name RfiId.
     * @return the value of RfiId
     */
    public Number getRfiId() {
        return (Number) getAttributeInternal(RFIID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RfiId.
     * @param value value to set the RfiId
     */
    public void setRfiId(Number value) {
        setAttributeInternal(RFIID, value);
    }

    /**
     * Gets the attribute value for Category, using the alias name Category.
     * @return the value of Category
     */
    public String getCategory() {
        return (String) getAttributeInternal(CATEGORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Category.
     * @param value value to set the Category
     */
    public void setCategory(String value) {
        setAttributeInternal(CATEGORY, value);
    }


    /**
     * @param attachmentId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number attachmentId) {
        return new Key(new Object[] { attachmentId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XX_ATTACHMENTS_S",getDBTransaction());
        setAttachmentId(seq.getSequenceNumber());
        }
        
        private static final byte USERNAME_HISTORY_TYPE =13;
        
        @Override
        protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
        if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
           // Custom History type logic goes here
          // return (String) (ADFContext.getCurrent().getSessionScope().get("UserName")==null?"Consultant":ADFContext.getCurrent().getSessionScope().get("UserName"));
          return (String) ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
        }
        return super.getHistoryContextForAttribute(attr);
        }
}

