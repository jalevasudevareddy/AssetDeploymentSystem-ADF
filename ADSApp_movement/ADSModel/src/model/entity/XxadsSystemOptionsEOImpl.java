package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 10 17:08:22 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsSystemOptionsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        SystemId,
        BuId,
        DivisionRequired,
        ActiveFlag,
        InactiveDate,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdatedDate,
        ObjectVersionNumber,
        SegmentNum,
        MasterOrganizationId,
        DeptSegmentNum;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SYSTEMID = AttributesEnum.SystemId.index();
    public static final int BUID = AttributesEnum.BuId.index();
    public static final int DIVISIONREQUIRED = AttributesEnum.DivisionRequired.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int INACTIVEDATE = AttributesEnum.InactiveDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();
    public static final int SEGMENTNUM = AttributesEnum.SegmentNum.index();
    public static final int MASTERORGANIZATIONID = AttributesEnum.MasterOrganizationId.index();
    public static final int DEPTSEGMENTNUM = AttributesEnum.DeptSegmentNum.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxadsSystemOptionsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsSystemOptionsEO");
    }


    /**
     * Gets the attribute value for SystemId, using the alias name SystemId.
     * @return the value of SystemId
     */
    public Number getSystemId() {
        return (Number) getAttributeInternal(SYSTEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SystemId.
     * @param value value to set the SystemId
     */
    public void setSystemId(Number value) {
        setAttributeInternal(SYSTEMID, value);
    }

    /**
     * Gets the attribute value for BuId, using the alias name BuId.
     * @return the value of BuId
     */
    public Number getBuId() {
        return (Number) getAttributeInternal(BUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuId.
     * @param value value to set the BuId
     */
    public void setBuId(Number value) {
        setAttributeInternal(BUID, value);
    }

    /**
     * Gets the attribute value for DivisionRequired, using the alias name DivisionRequired.
     * @return the value of DivisionRequired
     */
    public String getDivisionRequired() {
        return (String) getAttributeInternal(DIVISIONREQUIRED);
    }

    /**
     * Sets <code>value</code> as the attribute value for DivisionRequired.
     * @param value value to set the DivisionRequired
     */
    public void setDivisionRequired(String value) {
        setAttributeInternal(DIVISIONREQUIRED, value);
    }

    /**
     * Gets the attribute value for ActiveFlag, using the alias name ActiveFlag.
     * @return the value of ActiveFlag
     */
    public String getActiveFlag() {
        return (String) getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActiveFlag.
     * @param value value to set the ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for InactiveDate, using the alias name InactiveDate.
     * @return the value of InactiveDate
     */
    public Date getInactiveDate() {
        return (Date) getAttributeInternal(INACTIVEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactiveDate.
     * @param value value to set the InactiveDate
     */
    public void setInactiveDate(Date value) {
        setAttributeInternal(INACTIVEDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }


    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }


    /**
     * Gets the attribute value for SegmentNum, using the alias name SegmentNum.
     * @return the value of SegmentNum
     */
    public Number getSegmentNum() {
        return (Number) getAttributeInternal(SEGMENTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for SegmentNum.
     * @param value value to set the SegmentNum
     */
    public void setSegmentNum(Number value) {
        setAttributeInternal(SEGMENTNUM, value);
    }

    /**
     * Gets the attribute value for MasterOrganizationId, using the alias name MasterOrganizationId.
     * @return the value of MasterOrganizationId
     */
    public Number getMasterOrganizationId() {
        return (Number) getAttributeInternal(MASTERORGANIZATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MasterOrganizationId.
     * @param value value to set the MasterOrganizationId
     */
    public void setMasterOrganizationId(Number value) {
        setAttributeInternal(MASTERORGANIZATIONID, value);
    }


    /**
     * Gets the attribute value for DeptSegmentNum, using the alias name DeptSegmentNum.
     * @return the value of DeptSegmentNum
     */
    public BigDecimal getDeptSegmentNum() {
        return (BigDecimal) getAttributeInternal(DEPTSEGMENTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for DeptSegmentNum.
     * @param value value to set the DeptSegmentNum
     */
    public void setDeptSegmentNum(BigDecimal value) {
        setAttributeInternal(DEPTSEGMENTNUM, value);
    }

    /**
     * @param systemId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number systemId) {
        return new Key(new Object[] { systemId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XXADS_SYSTEM_OPTIONS_S",getDBTransaction());
        setSystemId(seq.getSequenceNumber());
    //        setAttachmentCode("PROBATION CONFIRMATION");
    }
    
    private static final byte USERNAME_HISTORY_TYPE =13;
    
    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
    if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
       // Custom History type logic goes here
      return (String) ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
    }
    return super.getHistoryContextForAttribute(attr);
    }
}

