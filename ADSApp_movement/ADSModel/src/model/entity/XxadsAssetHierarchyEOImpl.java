package model.entity;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 26 14:19:15 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsAssetHierarchyEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        HierarchyId,
        AssetId,
        ParentAssetId,
        AttachedDate,
        DetachedDate,
        CreationDate,
        CreatedBy,
        LastUpdateDate,
        LastUpdatedBy,
        ObjectVersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    
    private static final byte USERNAME_HISTORY_TYPE = 13;

    public static final int HIERARCHYID = AttributesEnum.HierarchyId.index();
    public static final int ASSETID = AttributesEnum.AssetId.index();
    public static final int PARENTASSETID = AttributesEnum.ParentAssetId.index();
    public static final int ATTACHEDDATE = AttributesEnum.AttachedDate.index();
    public static final int DETACHEDDATE = AttributesEnum.DetachedDate.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();

    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
            if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
                    // Custom History type logic goes here
                    return (String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
            }
        return super.getHistoryContextForAttribute(attr);
    }
    
    /**
     * This is the default constructor (do not remove).
     */
    public XxadsAssetHierarchyEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsAssetHierarchyEO");
    }


    /**
     * Gets the attribute value for HierarchyId, using the alias name HierarchyId.
     * @return the value of HierarchyId
     */
    public Number getHierarchyId() {
        return (Number) getAttributeInternal(HIERARCHYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HierarchyId.
     * @param value value to set the HierarchyId
     */
    public void setHierarchyId(Number value) {
        setAttributeInternal(HIERARCHYID, value);
    }

    /**
     * Gets the attribute value for AssetId, using the alias name AssetId.
     * @return the value of AssetId
     */
    public Number getAssetId() {
        return (Number) getAttributeInternal(ASSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssetId.
     * @param value value to set the AssetId
     */
    public void setAssetId(Number value) {
        setAttributeInternal(ASSETID, value);
    }

    /**
     * Gets the attribute value for ParentAssetId, using the alias name ParentAssetId.
     * @return the value of ParentAssetId
     */
    public Number getParentAssetId() {
        return (Number) getAttributeInternal(PARENTASSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParentAssetId.
     * @param value value to set the ParentAssetId
     */
    public void setParentAssetId(Number value) {
        setAttributeInternal(PARENTASSETID, value);
    }

    /**
     * Gets the attribute value for AttachedDate, using the alias name AttachedDate.
     * @return the value of AttachedDate
     */
    public Date getAttachedDate() {
        return (Date) getAttributeInternal(ATTACHEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachedDate.
     * @param value value to set the AttachedDate
     */
    public void setAttachedDate(Date value) {
        setAttributeInternal(ATTACHEDDATE, value);
    }

    /**
     * Gets the attribute value for DetachedDate, using the alias name DetachedDate.
     * @return the value of DetachedDate
     */
    public Date getDetachedDate() {
        return (Date) getAttributeInternal(DETACHEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DetachedDate.
     * @param value value to set the DetachedDate
     */
    public void setDetachedDate(Date value) {
        setAttributeInternal(DETACHEDDATE, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }


    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }


    /**
     * @param hierarchyId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number hierarchyId) {
        return new Key(new Object[] { hierarchyId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("xxads_asset_hierarchy_s", this.getDBTransaction());
        setHierarchyId(seq.getSequenceNumber());
    }
}

