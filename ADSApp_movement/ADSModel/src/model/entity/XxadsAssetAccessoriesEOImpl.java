package model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 26 14:40:43 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsAssetAccessoriesEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        AccessoryId,
        AssetId,
        AccessoryType,
        AttachedFlag,
        Quantity,
        CreationDate,
        CreatedBy,
        LastUpdateDate,
        LastUpdatedBy,
        ObjectVersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    
    private static final byte USERNAME_HISTORY_TYPE = 13;


    public static final int ACCESSORYID = AttributesEnum.AccessoryId.index();
    public static final int ASSETID = AttributesEnum.AssetId.index();
    public static final int ACCESSORYTYPE = AttributesEnum.AccessoryType.index();
    public static final int ATTACHEDFLAG = AttributesEnum.AttachedFlag.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxadsAssetAccessoriesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsAssetAccessoriesEO");
    }

    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
            if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
                    // Custom History type logic goes here
                    return (String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
            }
            return super.getHistoryContextForAttribute(attr);
    }


    /**
     * Gets the attribute value for AccessoryId, using the alias name AccessoryId.
     * @return the value of AccessoryId
     */
    public oracle.jbo.domain.Number getAccessoryId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(ACCESSORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccessoryId.
     * @param value value to set the AccessoryId
     */
    public void setAccessoryId(oracle.jbo.domain.Number value) {
        setAttributeInternal(ACCESSORYID, value);
    }

    /**
     * Gets the attribute value for AssetId, using the alias name AssetId.
     * @return the value of AssetId
     */
    public Number getAssetId() {
        return (Number) getAttributeInternal(ASSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssetId.
     * @param value value to set the AssetId
     */
    public void setAssetId(Number value) {
        setAttributeInternal(ASSETID, value);
    }

    /**
     * Gets the attribute value for AccessoryType, using the alias name AccessoryType.
     * @return the value of AccessoryType
     */
    public String getAccessoryType() {
        return (String) getAttributeInternal(ACCESSORYTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccessoryType.
     * @param value value to set the AccessoryType
     */
    public void setAccessoryType(String value) {
        setAttributeInternal(ACCESSORYTYPE, value);
    }

    /**
     * Gets the attribute value for AttachedFlag, using the alias name AttachedFlag.
     * @return the value of AttachedFlag
     */
    public String getAttachedFlag() {
        return (String) getAttributeInternal(ATTACHEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachedFlag.
     * @param value value to set the AttachedFlag
     */
    public void setAttachedFlag(String value) {
        setAttributeInternal(ATTACHEDFLAG, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the value of Quantity
     */
    public Number getQuantity() {
        return (Number) getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }


    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }


    /**
     * @param accessoryId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number accessoryId) {
        return new Key(new Object[] { accessoryId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        
        SequenceImpl seq = new SequenceImpl("xxads_asset_accessories_s", this.getDBTransaction());
        setAccessoryId(seq.getSequenceNumber());
        setAttachedFlag("N");
    }
}

