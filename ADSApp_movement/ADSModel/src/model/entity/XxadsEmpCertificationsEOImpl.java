package model.entity;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 02 16:30:26 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxadsEmpCertificationsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        CertificationId,
        MasterId,
        CertificationType,
        SubType,
        ReferenceNo,
        ValidFromDate,
        ValidToDate,
        Remarks,
        CreationDate,
        CreatedBy,
        LastUpdateDate,
        LastUpdatedBy,
        ObjectVersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    private static final byte USERNAME_HISTORY_TYPE = 13;

    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
            if (attr.getHistoryKind() == USERNAME_HISTORY_TYPE) {
                    // Custom History type logic goes here
                    return (String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName");
            }
            return super.getHistoryContextForAttribute(attr);
    }


    public static final int CERTIFICATIONID = AttributesEnum.CertificationId.index();
    public static final int MASTERID = AttributesEnum.MasterId.index();
    public static final int CERTIFICATIONTYPE = AttributesEnum.CertificationType.index();
    public static final int SUBTYPE = AttributesEnum.SubType.index();
    public static final int REFERENCENO = AttributesEnum.ReferenceNo.index();
    public static final int VALIDFROMDATE = AttributesEnum.ValidFromDate.index();
    public static final int VALIDTODATE = AttributesEnum.ValidToDate.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxadsEmpCertificationsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.XxadsEmpCertificationsEO");
    }


    /**
     * Gets the attribute value for CertificationId, using the alias name CertificationId.
     * @return the value of CertificationId
     */
    public oracle.jbo.domain.Number getCertificationId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(CERTIFICATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CertificationId.
     * @param value value to set the CertificationId
     */
    public void setCertificationId(oracle.jbo.domain.Number value) {
        setAttributeInternal(CERTIFICATIONID, value);
    }

    /**
     * Gets the attribute value for MasterId, using the alias name MasterId.
     * @return the value of MasterId
     */
    public Number getMasterId() {
        return (Number) getAttributeInternal(MASTERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MasterId.
     * @param value value to set the MasterId
     */
    public void setMasterId(Number value) {
        setAttributeInternal(MASTERID, value);
    }

    /**
     * Gets the attribute value for CertificationType, using the alias name CertificationType.
     * @return the value of CertificationType
     */
    public String getCertificationType() {
        return (String) getAttributeInternal(CERTIFICATIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CertificationType.
     * @param value value to set the CertificationType
     */
    public void setCertificationType(String value) {
        setAttributeInternal(CERTIFICATIONTYPE, value);
    }

    /**
     * Gets the attribute value for SubType, using the alias name SubType.
     * @return the value of SubType
     */
    public String getSubType() {
        return (String) getAttributeInternal(SUBTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SubType.
     * @param value value to set the SubType
     */
    public void setSubType(String value) {
        setAttributeInternal(SUBTYPE, value);
    }

    /**
     * Gets the attribute value for ReferenceNo, using the alias name ReferenceNo.
     * @return the value of ReferenceNo
     */
    public String getReferenceNo() {
        return (String) getAttributeInternal(REFERENCENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceNo.
     * @param value value to set the ReferenceNo
     */
    public void setReferenceNo(String value) {
        setAttributeInternal(REFERENCENO, value);
    }

    /**
     * Gets the attribute value for ValidFromDate, using the alias name ValidFromDate.
     * @return the value of ValidFromDate
     */
    public Date getValidFromDate() {
        return (Date) getAttributeInternal(VALIDFROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidFromDate.
     * @param value value to set the ValidFromDate
     */
    public void setValidFromDate(Date value) {
        setAttributeInternal(VALIDFROMDATE, value);
    }

    /**
     * Gets the attribute value for ValidToDate, using the alias name ValidToDate.
     * @return the value of ValidToDate
     */
    public Date getValidToDate() {
        return (Date) getAttributeInternal(VALIDTODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidToDate.
     * @param value value to set the ValidToDate
     */
    public void setValidToDate(Date value) {
        setAttributeInternal(VALIDTODATE, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }


    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }


    /**
     * @param certificationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number certificationId) {
        return new Key(new Object[] { certificationId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        
        SequenceImpl seq = new SequenceImpl("XXADS_EMP_CERTIFICATIONS_S", this.getDBTransaction());
        setCertificationId(seq.getSequenceNumber());
    }
}

