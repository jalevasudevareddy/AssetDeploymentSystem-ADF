package model.view;

import java.math.BigDecimal;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 09 18:51:09 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractLinesPopulateVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        RefLineId,
        RefLineNum,
        TransLineType,
        LineType,
        CategoryName,
        CategoryDescription,
        CategoryId,
        Quantity,
        HiringBasis,
        TransFixedVariable,
        HiringBasisRuleId,
        TransOperatorOption,
        OperatorOption,
        TransFuelOption,
        FuelOption,
        TransMobilizationRequired,
        MobilizationRequired,
        TransShift,
        Shift,
        OnHireDate,
        OffHireDate,
        StandardRate,
        Ot1Rate,
        Ot2Rate,
        TransMinChargeUnit,
        MinChargeUnit,
        MinChargeValue,
        RefLineMasterId,
        HeaderId,
        MasterHdrId,
        LineSource,
        TransLineSource,
        TotQuantity,
        TaskId,
        TaskName,
        ExpenditureTypeId,
        ExpenditureTypeDesc,
        UnitRate,
        NoOfDays,
        NoOfHours,
        TransFlag;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int REFLINEID = AttributesEnum.RefLineId.index();
    public static final int REFLINENUM = AttributesEnum.RefLineNum.index();
    public static final int TRANSLINETYPE = AttributesEnum.TransLineType.index();
    public static final int LINETYPE = AttributesEnum.LineType.index();
    public static final int CATEGORYNAME = AttributesEnum.CategoryName.index();
    public static final int CATEGORYDESCRIPTION = AttributesEnum.CategoryDescription.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int HIRINGBASIS = AttributesEnum.HiringBasis.index();
    public static final int TRANSFIXEDVARIABLE = AttributesEnum.TransFixedVariable.index();
    public static final int HIRINGBASISRULEID = AttributesEnum.HiringBasisRuleId.index();
    public static final int TRANSOPERATOROPTION = AttributesEnum.TransOperatorOption.index();
    public static final int OPERATOROPTION = AttributesEnum.OperatorOption.index();
    public static final int TRANSFUELOPTION = AttributesEnum.TransFuelOption.index();
    public static final int FUELOPTION = AttributesEnum.FuelOption.index();
    public static final int TRANSMOBILIZATIONREQUIRED = AttributesEnum.TransMobilizationRequired.index();
    public static final int MOBILIZATIONREQUIRED = AttributesEnum.MobilizationRequired.index();
    public static final int TRANSSHIFT = AttributesEnum.TransShift.index();
    public static final int SHIFT = AttributesEnum.Shift.index();
    public static final int ONHIREDATE = AttributesEnum.OnHireDate.index();
    public static final int OFFHIREDATE = AttributesEnum.OffHireDate.index();
    public static final int STANDARDRATE = AttributesEnum.StandardRate.index();
    public static final int OT1RATE = AttributesEnum.Ot1Rate.index();
    public static final int OT2RATE = AttributesEnum.Ot2Rate.index();
    public static final int TRANSMINCHARGEUNIT = AttributesEnum.TransMinChargeUnit.index();
    public static final int MINCHARGEUNIT = AttributesEnum.MinChargeUnit.index();
    public static final int MINCHARGEVALUE = AttributesEnum.MinChargeValue.index();
    public static final int REFLINEMASTERID = AttributesEnum.RefLineMasterId.index();
    public static final int HEADERID = AttributesEnum.HeaderId.index();
    public static final int MASTERHDRID = AttributesEnum.MasterHdrId.index();
    public static final int LINESOURCE = AttributesEnum.LineSource.index();
    public static final int TRANSLINESOURCE = AttributesEnum.TransLineSource.index();
    public static final int TOTQUANTITY = AttributesEnum.TotQuantity.index();
    public static final int TASKID = AttributesEnum.TaskId.index();
    public static final int TASKNAME = AttributesEnum.TaskName.index();
    public static final int EXPENDITURETYPEID = AttributesEnum.ExpenditureTypeId.index();
    public static final int EXPENDITURETYPEDESC = AttributesEnum.ExpenditureTypeDesc.index();
    public static final int UNITRATE = AttributesEnum.UnitRate.index();
    public static final int NOOFDAYS = AttributesEnum.NoOfDays.index();
    public static final int NOOFHOURS = AttributesEnum.NoOfHours.index();
    public static final int TRANSFLAG = AttributesEnum.TransFlag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ContractLinesPopulateVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute RefLineId.
     * @return the RefLineId
     */
    public oracle.jbo.domain.Number getRefLineId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(REFLINEID);
    }

    /**
     * Gets the attribute value for the calculated attribute RefLineNum.
     * @return the RefLineNum
     */
    public Number getRefLineNum() {
        return (Number) getAttributeInternal(REFLINENUM);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLineType.
     * @return the TransLineType
     */
    public String getTransLineType() {
        return (String) getAttributeInternal(TRANSLINETYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute LineType.
     * @return the LineType
     */
    public String getLineType() {
        return (String) getAttributeInternal(LINETYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryName.
     * @return the CategoryName
     */
    public String getCategoryName() {
        return (String) getAttributeInternal(CATEGORYNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryDescription.
     * @return the CategoryDescription
     */
    public String getCategoryDescription() {
        return (String) getAttributeInternal(CATEGORYDESCRIPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryId.
     * @return the CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Gets the attribute value for the calculated attribute Quantity.
     * @return the Quantity
     */
    public Number getQuantity() {
        return (Number) getAttributeInternal(QUANTITY);
    }

    /**
     * Gets the attribute value for the calculated attribute HiringBasis.
     * @return the HiringBasis
     */
    public String getHiringBasis() {
        return (String) getAttributeInternal(HIRINGBASIS);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFixedVariable.
     * @return the TransFixedVariable
     */
    public String getTransFixedVariable() {
        return (String) getAttributeInternal(TRANSFIXEDVARIABLE);
    }

    /**
     * Gets the attribute value for the calculated attribute HiringBasisRuleId.
     * @return the HiringBasisRuleId
     */
    public Number getHiringBasisRuleId() {
        return (Number) getAttributeInternal(HIRINGBASISRULEID);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOperatorOption.
     * @return the TransOperatorOption
     */
    public String getTransOperatorOption() {
        return (String) getAttributeInternal(TRANSOPERATOROPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute OperatorOption.
     * @return the OperatorOption
     */
    public String getOperatorOption() {
        return (String) getAttributeInternal(OPERATOROPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFuelOption.
     * @return the TransFuelOption
     */
    public String getTransFuelOption() {
        return (String) getAttributeInternal(TRANSFUELOPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute FuelOption.
     * @return the FuelOption
     */
    public String getFuelOption() {
        return (String) getAttributeInternal(FUELOPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMobilizationRequired.
     * @return the TransMobilizationRequired
     */
    public String getTransMobilizationRequired() {
        return (String) getAttributeInternal(TRANSMOBILIZATIONREQUIRED);
    }

    /**
     * Gets the attribute value for the calculated attribute MobilizationRequired.
     * @return the MobilizationRequired
     */
    public String getMobilizationRequired() {
        return (String) getAttributeInternal(MOBILIZATIONREQUIRED);
    }

    /**
     * Gets the attribute value for the calculated attribute TransShift.
     * @return the TransShift
     */
    public String getTransShift() {
        return (String) getAttributeInternal(TRANSSHIFT);
    }

    /**
     * Gets the attribute value for the calculated attribute Shift.
     * @return the Shift
     */
    public String getShift() {
        return (String) getAttributeInternal(SHIFT);
    }

    /**
     * Gets the attribute value for the calculated attribute OnHireDate.
     * @return the OnHireDate
     */
    public Date getOnHireDate() {
        return (Date) getAttributeInternal(ONHIREDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute OffHireDate.
     * @return the OffHireDate
     */
    public Date getOffHireDate() {
        return (Date) getAttributeInternal(OFFHIREDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute StandardRate.
     * @return the StandardRate
     */
    public Number getStandardRate() {
        return (Number) getAttributeInternal(STANDARDRATE);
    }

    /**
     * Gets the attribute value for the calculated attribute Ot1Rate.
     * @return the Ot1Rate
     */
    public Number getOt1Rate() {
        return (Number) getAttributeInternal(OT1RATE);
    }

    /**
     * Gets the attribute value for the calculated attribute Ot2Rate.
     * @return the Ot2Rate
     */
    public Number getOt2Rate() {
        return (Number) getAttributeInternal(OT2RATE);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMinChargeUnit.
     * @return the TransMinChargeUnit
     */
    public String getTransMinChargeUnit() {
        return (String) getAttributeInternal(TRANSMINCHARGEUNIT);
    }

    /**
     * Gets the attribute value for the calculated attribute MinChargeUnit.
     * @return the MinChargeUnit
     */
    public String getMinChargeUnit() {
        return (String) getAttributeInternal(MINCHARGEUNIT);
    }

    /**
     * Gets the attribute value for the calculated attribute MinChargeValue.
     * @return the MinChargeValue
     */
    public Number getMinChargeValue() {
        return (Number) getAttributeInternal(MINCHARGEVALUE);
    }

    /**
     * Gets the attribute value for the calculated attribute RefLineMasterId.
     * @return the RefLineMasterId
     */
    public Number getRefLineMasterId() {
        return (Number) getAttributeInternal(REFLINEMASTERID);
    }

    /**
     * Gets the attribute value for the calculated attribute HeaderId.
     * @return the HeaderId
     */
    public Number getHeaderId() {
        return (Number) getAttributeInternal(HEADERID);
    }

    /**
     * Gets the attribute value for the calculated attribute MasterHdrId.
     * @return the MasterHdrId
     */
    public Number getMasterHdrId() {
        return (Number) getAttributeInternal(MASTERHDRID);
    }

    /**
     * Gets the attribute value for the calculated attribute LineSource.
     * @return the LineSource
     */
    public String getLineSource() {
        return (String) getAttributeInternal(LINESOURCE);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLineSource.
     * @return the TransLineSource
     */
    public String getTransLineSource() {
        return (String) getAttributeInternal(TRANSLINESOURCE);
    }

    /**
     * Gets the attribute value for the calculated attribute TotQuantity.
     * @return the TotQuantity
     */
    public BigDecimal getTotQuantity() {
        return (BigDecimal) getAttributeInternal(TOTQUANTITY);
    }

    /**
     * Gets the attribute value for the calculated attribute TaskId.
     * @return the TaskId
     */
    public Number getTaskId() {
        return (Number) getAttributeInternal(TASKID);
    }

    /**
     * Gets the attribute value for the calculated attribute TaskName.
     * @return the TaskName
     */
    public String getTaskName() {
        return (String) getAttributeInternal(TASKNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute ExpenditureTypeId.
     * @return the ExpenditureTypeId
     */
    public Number getExpenditureTypeId() {
        return (Number) getAttributeInternal(EXPENDITURETYPEID);
    }

    /**
     * Gets the attribute value for the calculated attribute ExpenditureTypeDesc.
     * @return the ExpenditureTypeDesc
     */
    public String getExpenditureTypeDesc() {
        return (String) getAttributeInternal(EXPENDITURETYPEDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute UnitRate.
     * @return the UnitRate
     */
    public Number getUnitRate() {
        return (Number) getAttributeInternal(UNITRATE);
    }

    /**
     * Gets the attribute value for the calculated attribute NoOfDays.
     * @return the NoOfDays
     */
    public Number getNoOfDays() {
        return (Number) getAttributeInternal(NOOFDAYS);
    }

    /**
     * Gets the attribute value for the calculated attribute NoOfHours.
     * @return the NoOfHours
     */
    public Number getNoOfHours() {
        return (Number) getAttributeInternal(NOOFHOURS);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFlag.
     * @return the TransFlag
     */
    public String getTransFlag() {
        return (String) getAttributeInternal(TRANSFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFlag.
     * @param value value to set the  TransFlag
     */
    public void setTransFlag(String value) {
        setAttributeInternal(TRANSFLAG, value);
    }
}

