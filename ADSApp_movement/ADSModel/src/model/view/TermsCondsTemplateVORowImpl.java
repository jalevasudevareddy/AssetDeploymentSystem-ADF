package model.view;

import model.entity.XxadsTermsCondTemplatesEOImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 09 15:30:33 IST 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TermsCondsTemplateVORowImpl extends ViewRowImpl {


    public static final int ENTITY_XXADSTERMSCONDTEMPLATESEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        ActiveFlag,
        CreatedBy,
        CreationDate,
        LastUpdateDate,
        LastUpdatedBy,
        ObjectVersionNumber,
        TemplateId,
        TemplateInfo,
        TemplateName,
        BuId,
        Division,
        DivFlexValueId,
        TransBuName,
        TransDivisionRequired,
        TransDivSegment,
        TemplatesLOV1,
        SystemOptionsBuLOV1,
        FlexValuesLOV1;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();
    public static final int TEMPLATEID = AttributesEnum.TemplateId.index();
    public static final int TEMPLATEINFO = AttributesEnum.TemplateInfo.index();
    public static final int TEMPLATENAME = AttributesEnum.TemplateName.index();
    public static final int BUID = AttributesEnum.BuId.index();
    public static final int DIVISION = AttributesEnum.Division.index();
    public static final int DIVFLEXVALUEID = AttributesEnum.DivFlexValueId.index();
    public static final int TRANSBUNAME = AttributesEnum.TransBuName.index();
    public static final int TRANSDIVISIONREQUIRED = AttributesEnum.TransDivisionRequired.index();
    public static final int TRANSDIVSEGMENT = AttributesEnum.TransDivSegment.index();
    public static final int TEMPLATESLOV1 = AttributesEnum.TemplatesLOV1.index();
    public static final int SYSTEMOPTIONSBULOV1 = AttributesEnum.SystemOptionsBuLOV1.index();
    public static final int FLEXVALUESLOV1 = AttributesEnum.FlexValuesLOV1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TermsCondsTemplateVORowImpl() {
    }

    /**
     * Gets XxadsTermsCondTemplatesEO entity object.
     * @return the XxadsTermsCondTemplatesEO
     */
    public XxadsTermsCondTemplatesEOImpl getXxadsTermsCondTemplatesEO() {
        return (XxadsTermsCondTemplatesEOImpl) getEntity(ENTITY_XXADSTERMSCONDTEMPLATESEO);
    }

    /**
     * Gets the attribute value for ACTIVE_FLAG using the alias name ActiveFlag.
     * @return the ACTIVE_FLAG
     */
    public String getActiveFlag() {
        return (String) getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for ACTIVE_FLAG using the alias name ActiveFlag.
     * @param value value to set the ACTIVE_FLAG
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @return the LAST_UPDATE_DATE
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for OBJECT_VERSION_NUMBER using the alias name ObjectVersionNumber.
     * @return the OBJECT_VERSION_NUMBER
     */
    public Number getObjectVersionNumber() {
        return (Number) getAttributeInternal(OBJECTVERSIONNUMBER);
    }

    /**
     * Gets the attribute value for TEMPLATE_ID using the alias name TemplateId.
     * @return the TEMPLATE_ID
     */
    public Number getTemplateId() {
        return (Number) getAttributeInternal(TEMPLATEID);
    }

    /**
     * Sets <code>value</code> as attribute value for TEMPLATE_ID using the alias name TemplateId.
     * @param value value to set the TEMPLATE_ID
     */
    public void setTemplateId(Number value) {
        setAttributeInternal(TEMPLATEID, value);
    }

    /**
     * Gets the attribute value for TEMPLATE_INFO using the alias name TemplateInfo.
     * @return the TEMPLATE_INFO
     */
    public String getTemplateInfo() {
        return (String) getAttributeInternal(TEMPLATEINFO);
    }

    /**
     * Sets <code>value</code> as attribute value for TEMPLATE_INFO using the alias name TemplateInfo.
     * @param value value to set the TEMPLATE_INFO
     */
    public void setTemplateInfo(String value) {
        setAttributeInternal(TEMPLATEINFO, value);
    }

    /**
     * Gets the attribute value for TEMPLATE_NAME using the alias name TemplateName.
     * @return the TEMPLATE_NAME
     */
    public String getTemplateName() {
        return (String) getAttributeInternal(TEMPLATENAME);
    }

    /**
     * Sets <code>value</code> as attribute value for TEMPLATE_NAME using the alias name TemplateName.
     * @param value value to set the TEMPLATE_NAME
     */
    public void setTemplateName(String value) {
        setAttributeInternal(TEMPLATENAME, value);
    }


    /**
     * Gets the attribute value for BU_ID using the alias name BuId.
     * @return the BU_ID
     */
    public Number getBuId() {
        return (Number) getAttributeInternal(BUID);
    }

    /**
     * Sets <code>value</code> as attribute value for BU_ID using the alias name BuId.
     * @param value value to set the BU_ID
     */
    public void setBuId(Number value) {
        setAttributeInternal(BUID, value);
    }

    /**
     * Gets the attribute value for DIVISION using the alias name Division.
     * @return the DIVISION
     */
    public String getDivision() {
        return (String) getAttributeInternal(DIVISION);
    }

    /**
     * Sets <code>value</code> as attribute value for DIVISION using the alias name Division.
     * @param value value to set the DIVISION
     */
    public void setDivision(String value) {
        setAttributeInternal(DIVISION, value);
    }

    /**
     * Gets the attribute value for DIV_FLEX_VALUE_ID using the alias name DivFlexValueId.
     * @return the DIV_FLEX_VALUE_ID
     */
    public Number getDivFlexValueId() {
        return (Number) getAttributeInternal(DIVFLEXVALUEID);
    }

    /**
     * Sets <code>value</code> as attribute value for DIV_FLEX_VALUE_ID using the alias name DivFlexValueId.
     * @param value value to set the DIV_FLEX_VALUE_ID
     */
    public void setDivFlexValueId(Number value) {
        setAttributeInternal(DIVFLEXVALUEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBuName.
     * @return the TransBuName
     */
    public String getTransBuName() {
        return (String) getAttributeInternal(TRANSBUNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBuName.
     * @param value value to set the  TransBuName
     */
    public void setTransBuName(String value) {
        setAttributeInternal(TRANSBUNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDivisionRequired.
     * @return the TransDivisionRequired
     */
    public String getTransDivisionRequired() {
        return (String) getAttributeInternal(TRANSDIVISIONREQUIRED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDivisionRequired.
     * @param value value to set the  TransDivisionRequired
     */
    public void setTransDivisionRequired(String value) {
        setAttributeInternal(TRANSDIVISIONREQUIRED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDivSegment.
     * @return the TransDivSegment
     */
    public Number getTransDivSegment() {
        return (Number) getAttributeInternal(TRANSDIVSEGMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDivSegment.
     * @param value value to set the  TransDivSegment
     */
    public void setTransDivSegment(Number value) {
        setAttributeInternal(TRANSDIVSEGMENT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TemplatesLOV1.
     */
    public RowSet getTemplatesLOV1() {
        return (RowSet) getAttributeInternal(TEMPLATESLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SystemOptionsBuLOV1.
     */
    public RowSet getSystemOptionsBuLOV1() {
        return (RowSet) getAttributeInternal(SYSTEMOPTIONSBULOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> FlexValuesLOV1.
     */
    public RowSet getFlexValuesLOV1() {
        return (RowSet) getAttributeInternal(FLEXVALUESLOV1);
    }
}

